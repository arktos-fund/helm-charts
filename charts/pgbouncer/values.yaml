# Default values for pgbouncer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

global:
  # optionally use namespace as dbname
  namespacedDatabases: false
  imagePullSecrets: []

image:
  repository: kubedb/pgbouncer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.17.0"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 70

databases:
  indices:
    host: 51.158.129.49
    port: 11796
    user: user_rw
    dbname: indices
    auth_user: pgbouncer

users: {}
  # username: password

# the name of an existing secret containg your user list
# data format is:
#     "username1" "password"
#     "username2" "other-password"
# existingUsersSecret: myuserlist-secret

# the key containing the secret
# existingUsersSecretKey: userlist.txt

# Custom pgbouncer.ini
settings:
  auth_type: plain
  #  use when you need need to get md5 password hashes for database users, for more information please check https://www.2ndquadrant.com/en/blog/pg-phriday-securing-pgbouncer/

  # following is an example of db setup
  # ===================================
  #  CREATE SCHEMA pgbouncer AUTHORIZATION pgbouncer;
  #  CREATE OR REPLACE FUNCTION pgbouncer.get_auth(p_usename TEXT)
  #  RETURNS TABLE(username TEXT, password TEXT) AS
  #  $$
  #  BEGIN
  #  RAISE WARNING 'PgBouncer auth request: %', p_usename;
  #  RETURN QUERY
  #  SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
  #  WHERE usename = p_usename;
  #  END;
  #  $$ LANGUAGE plpgsql SECURITY DEFINER;
  #
  # after doing the above, override/enable auth_query as follows
  # ======================================+++++++===============
  auth_query: "auth_query = SELECT * FROM pgbouncer.get_auth($1)"

connectionLimits:
  maxClientConn: 200
  defaultPoolSize: 200
  minPoolSize: 15
  reservePoolSize: 25
  reservePoolTimeout: 5

logConnections: 0
logDisconnections: 0
logStats: 0
logPoolerErrors: 1
verbose: 0
statsPeriod: 60
serverLifetime: 3600
serverIdleTimeout: 600
serverConnectTimeout: 15
serverLoginRetry: 15
queryTimeout: 0
queryWaitTimeout: 120
clientIdleTimout: 0
clientLoginTimeout: 60

service:
  type: ClusterIP
  port: 6432

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector:
  kubernetes.io/arch: amd64
  kubernetes.io/os: linux

tolerations: []

affinity: {}