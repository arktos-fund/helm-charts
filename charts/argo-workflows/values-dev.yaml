images:
  pullPolicy: IfNotPresent
  pullSecrets: []
  # - name: argo-pull-secret

controller:
  image:
    registry: quay.io
    repository: argoproj/workflow-controller
    tag: ""
  parallelism: 5
  resourceRateLimit:
    limit: 10
    burst: 1

  metricsConfig:
    enabled: true
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # -- Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level.
  # Only valid for 2.7+
  ## See more: https://argoproj.github.io/argo-workflows/default-workflow-specs/
  workflowDefaults:
    spec:
      ttlStrategy:
        secondsAfterCompletion: 84600

  telemetryConfig:
    enabled: true

  workflowNamespaces:
    - deploy

  containerRuntimeExecutor: emissary

  logging:
    level: warn
    globallevel: "0"

  resources: {}

  replicas: 1

  pdb:
    enabled: false
    minAvailable: 1
    maxUnavailable: 1

  nodeSelector:
    k8s.scaleway.com/pool-name: app
    kubernetes.io/arch: amd64
    kubernetes.io/os: linux

  clusterWorkflowTemplates:
    enabled: false

# executor controls how the init and wait container should be customized
executor:
  image:
    tag: ""
  resources: {}
  env: {}
  securityContext: {}

server:
  image:
    tag: ""

  replicas: 1
  pdb:
    enabled: false
    minAvailable: 1
    maxUnavailable: 1

  # -- [Node selector]
  nodeSelector:
    k8s.scaleway.com/pool-name: app
    kubernetes.io/arch: amd64
    kubernetes.io/os: linux

  # -- Extra arguments to provide to the Argo server binary, such as for disabling authentication.
  extraArgs:
    - --auth-mode=server

  ingress:
    enabled: false
    ingressClassName: "nginx"
    hosts:
      - argoworkflows.arktos-consulting.cloud

  clusterWorkflowTemplates:
    enabled: false

  sso: {}
    ## All the values are required. SSO is activated by adding --auth-mode=sso
    ## to the server command line.
    #
    ## The root URL of the OIDC identity provider.
    # issuer: https://accounts.google.com
    ## Name of a secret and a key in it to retrieve the app OIDC client ID from.
    # clientId:
    #   name: argo-server-sso
    #   key: client-id
    ## Name of a secret and a key in it to retrieve the app OIDC client secret from.
    # clientSecret:
    #   name: argo-server-sso
    #   key: client-secret
    ## The OIDC redirect URL. Should be in the form <argo-root-url>/oauth2/callback.
    # redirectUrl: https://argo/oauth2/callback
    # rbac:
    #   enabled: true
    ## When present, restricts secrets the server can read to a given list.
    ## You can use it to restrict the server to only be able to access the
    ## service account token secrets that are associated with service accounts
    ## used for authorization.
    #   secretWhitelist: []
    ## Scopes requested from the SSO ID provider.  The 'groups' scope requests
    ## group membership information, which is usually used for authorization
    ## decisions.
    # scopes:
    # - groups